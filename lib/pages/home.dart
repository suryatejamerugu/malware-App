import 'dart:developer';
import 'dart:ui';

import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/services.dart';
import 'package:malware/popups/addAccount.dart';
import 'package:firebase_database/firebase_database.dart';
import 'package:malware/popups/AddMeeting.dart';

class HomeScreen extends StatefulWidget {
  @override
  _HomeScreenState createState() => _HomeScreenState();
}

class _HomeScreenState extends State<HomeScreen> {
  var accounts;
  int currentDay;
  bool dataloaded = false;
  bool serverState = false;
  String serverMsg = "Connecting to the Server....";
  List<dynamic> teamNames;
  int ci = 0;
  var shedule ;
  var itcs = [0,0,0,0,0,0,0];
  bool flag = true;
  @override
  void initState() {
    super.initState();
    final ref = FirebaseDatabase.instance.reference();

  }

  @override
  Widget build(BuildContext context) {
    if (accounts == null) accounts = [];
    final ref = FirebaseDatabase.instance.reference();
    final auth = FirebaseAuth.instance;
    if(flag == true){ flag = false;
    ref.child("users").child(FirebaseAuth.instance.currentUser.uid).child("shedule").onValue.listen((event) {

        shedule = event.snapshot.value;
        if( event.snapshot.value != null){
      for(int i = 0 ; i < shedule.length; i++){
        //print(shedule[i]);
        if(shedule[i] != null){
          itcs[i] = shedule[i].length;
        }
      }}
      else{
        itcs = [0,0,0,0,0,0,0];
        shedule = [];
      }
      setState(() {
        print("setState");

      });
    });}

    //loding Server State
    ref.child("serverState").child(auth.currentUser.uid).child("value").once().then((value) {
      if(value.value != null)
      serverState = value.value;
      setState(() {
      });
    });

    //loding Server message
    ref.child("serverState").child(auth.currentUser.uid).child("msg").onValue.listen((event) {
      if(event.snapshot.value != null)
      serverMsg = event.snapshot.value;
      setState(() {
      });
    });


    //loading teams
    ref.child("users").child(auth.currentUser.uid).child("teams").onValue.listen((event) {
      teamNames = event.snapshot.value;
      setState(() {});
    });


    return Stack(
      children: [
        DefaultTabController(
          initialIndex: 0,
          length: Days.length,
          child: Scaffold(
            appBar: AppBar(
              title: Row(
                mainAxisAlignment: MainAxisAlignment.end,
                children: [
                  Container(
                    padding: EdgeInsets.only(top: 10, right: 70),
                    child: Align(
                      alignment: Alignment.center,
                      child: Hero(
                          tag: "logo",
                          child: Image.asset(
                            "assets/images/SSimg.png",
                            scale: 1.5,
                          )),
                    ),
                  ),
                  Switch(
                      value: serverState,
                      onChanged: (value) {
                        bool state = value;
                        ref
                            .child("serverState")
                            .child(auth.currentUser.uid)
                            .update({"value": value}).then((value) => setState(() {
                                  serverState = state;
                                }));
                        if(value == false) {
                          ref
                              .child("serverState")
                              .child(auth.currentUser.uid)
                              .update({"msg": "Server Stoped"}).then((value) {});
                        }
                      })
                ],
              ),
              bottom: TabBar(
                  isScrollable: true,
                  indicatorColor: Colors.deepPurpleAccent[100],
                  tabs: Days.map((Day d) {
                    return Tab(
                      text: d.title,
                    );
                  }).toList()),
            ),
            drawer: Drawer(
              child: SafeArea(
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Container(
                      decoration: BoxDecoration(
                        color: Colors.deepPurpleAccent[100],
                        //borderRadius: BorderRadius.all(Radius.circular(10))
                      ),
                      child: Column(
                        children: [
                          Row(
                            children: [
                              Padding(
                                padding: const EdgeInsets.only(
                                    left: 20, top: 20, bottom: 20, right: 10),
                                child: CircleAvatar(
                                  backgroundImage: NetworkImage(
                                      FirebaseAuth.instance.currentUser.photoURL),
                                  radius: 25,
                                ),
                              ),
                              Column(
                                children: [
                                  Text(
                                    FirebaseAuth.instance.currentUser.displayName,
                                    style: TextStyle(
                                        fontSize: 17, fontWeight: FontWeight.bold),
                                  ),
                                  SizedBox(
                                    height: 3,
                                  ),
                                  Text(
                                    FirebaseAuth.instance.currentUser.email,
                                    style: TextStyle(
                                      fontSize: 10,
                                    ),
                                  )
                                ],
                              )
                            ],
                          ),
                          Align(
                            alignment: Alignment.centerLeft,
                            child: Padding(
                              padding: const EdgeInsets.only(left: 20, bottom: 5),
                              child: Text(
                                "  ",
                                style: TextStyle(fontSize: 18),
                              ),
                            ),
                          ),
                        ],
                      ),
                    ),
                    //Divider(thickness: 2,),
                    SizedBox(
                      height: 5,
                    ),
                    Expanded(
                      child: Container(
                        decoration: BoxDecoration(
                            color: Colors.white,
                            borderRadius: BorderRadius.circular(10)),
                        child: Column(
                          children: [
                            Align(
                              alignment: Alignment.center,
                              child: Padding(
                                padding: const EdgeInsets.only(top: 8, right: 10),
                                child: Text(
                                  "Your Account",
                                  style: TextStyle(
                                    fontSize: 18,
                                    fontWeight: FontWeight.bold,
                                  ),
                                ),
                              ),
                            ),
                            Divider(
                              thickness: 1.2,
                            ),
                            //list of accounts
                            showAccounts(),
                            Divider(
                              thickness: 1.2,
                            ),
                            //list of accounts
                            GestureDetector(
                              onTap: () => {
                                showDialog(
                                    context: context,
                                    builder: (context) => AddAccount())
                              },
                              child: Container(
                                margin: EdgeInsets.only(bottom: 16),
                                decoration: BoxDecoration(
                                    color: Colors.deepPurpleAccent[100],
                                    borderRadius: BorderRadius.circular(20)),
                                child: Padding(
                                  padding: const EdgeInsets.only(
                                      left: 30, right: 30, top: 6, bottom: 6),
                                  child: Text(
                                    "Edit Account",
                                    style: TextStyle(
                                        fontWeight: FontWeight.w400, fontSize: 18),
                                  ),
                                ),
                              ),
                            )
                          ],
                        ),
                      ),
                    ),
                    //Divider(thickness: 2,),
                    Container(
                      width: MediaQuery.of(context).size.width,
                      decoration: BoxDecoration(
                        color: Colors.deepPurpleAccent[100],
                      ),
                    ),
                  ],
                ),
              ),
            ),
            body: TabBarView(

              children: [
                for(int i = 0 ; i < 7 ; i++) ListView.builder(
                  itemCount: itcs[i],
                    itemBuilder: (context,index){

                  return GestureDetector(
                    onLongPress: (){
                      var dayList = new List.of(shedule[i]);
                      dayList.remove(shedule[i][index]);
                      shedule[i] = dayList;
                      ref.child("users").child(auth.currentUser.uid).child("shedule").set(shedule).then((value) {
                        setState(() {

                        });
                      });
                    },
                    child: Card(
                      child: ListTile(
                        title: Text(shedule[i][index]["tname"]),
                        subtitle: Row(
                          mainAxisAlignment: MainAxisAlignment.spaceBetween,
                          children: [
                            Text("Start Time : " + shedule[i][index]["start_time"]),
                            Text("End Time : " + shedule[i][index]["end_time"]),
                          ],
                        ),
                      ),
                    ),
                  );
                })
              ],
            ),

            // Column(
            //   children : [
            //
            //     Expanded(child: Container()),
            //     Container(
            //       width: MediaQuery.of(context).size.width,
            //       decoration: BoxDecoration(
            //         color: Colors.deepPurpleAccent[100],
            //       ),
            //       child: Padding(
            //         padding: EdgeInsets.only(left: 10, top: 3, bottom: 5),
            //         child: Column(
            //           crossAxisAlignment: CrossAxisAlignment.start,
            //           mainAxisAlignment: MainAxisAlignment.start,
            //           children: [
            //             Text(
            //               "Status",
            //               style: TextStyle(
            //                 fontSize: 10,
            //                 fontWeight: FontWeight.bold,
            //               ),
            //             ),
            //             Text(
            //               "Server Down",
            //               style: TextStyle(fontWeight: FontWeight.w300),
            //             )
            //           ],
            //         ),
            //       ),
            //     )
            //   ],
            // ),
            floatingActionButton: Padding(
              padding: const EdgeInsets.only(bottom: 40),
              child: FloatingActionButton(
                  onPressed: () {
                    showDialog(
                        context: context,
                        builder: (context) => AddMeeting(
                              teamNames: teamNames,
                              dayIndexs: ["0" ,"1","2","3","4","5","6"],
                            ));
                  },
                  backgroundColor: Colors.deepPurpleAccent[100],
                  child: Text(
                    "+",
                    style: TextStyle(fontSize: 28),
                  )),
            ),
          ),
        ),
        Align(
          alignment: Alignment.bottomCenter,
          child: Material(child: Container(
            width: MediaQuery.of(context).size.width,
            padding: EdgeInsets.all(8),
            decoration: BoxDecoration(
              color: Colors.deepPurpleAccent[100],
            ),
              child: Text(serverMsg,
              style: TextStyle(
                fontSize: 16,
              ),))),
        ),
      ],
    );
  }

  Widget draweritemBuilder(BuildContext context, int index) {
    return ListTile(
      title: Text("Email : " + accounts[index]["email"]),
      subtitle: Text("Password : " + accounts[index]["password"]),
    );
  }

  Widget showAccounts() {
    if (!dataloaded)
      ref
          .child("users")
          .child(FirebaseAuth.instance.currentUser.uid)
          .child("accounts")
          .once()
          .then((value) {
        accounts = value.value;
        print(accounts["passowrd"]);
        setState(() {
          dataloaded = true;
        });
      });
    if (!dataloaded)
      return Container();
    else
      return ListTile(
        title: Text("Email : " + accounts["email"]),
        subtitle: Text("Password : " + accounts["passowrd"]),
      );
  }
}

class Day {
  final String title;
  const Day({this.title});
}

class meetingCardData {
  final String start_time;
  final String end_time;
  final String team_name;
  const meetingCardData({this.start_time, this.end_time, this.team_name});
}

const List<Day> Days = <Day>[
  Day(title: "Mon"),
  Day(title: "Tue"),
  Day(title: "Wed"),
  Day(title: "Thu"),
  Day(title: "Fri"),
  Day(title: "Sat"),
  Day(title: "Sun"),
];

_showDayPage(int index, BuildContext context) {
  var data;
  final ref = FirebaseDatabase.instance.reference();
  final auth = FirebaseAuth.instance;

  print("_______day_card_________");
  ref
      .child("users")
      .child(auth.currentUser.uid)
      .child("shedule")
      .child(index.toString())
      .once()
      .then((value) {
    data = value.value;
    print(data);

    if (data == null) return Container();
    return ListView.builder(
        itemCount: data.length,
        itemBuilder: (context, index) {
          return ListTile(
            title: Text(data[index]["tname"]),
            subtitle: Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(data[index]["start_time"]),
                Text(data[index]["end_time"]),
              ],
            ),
          );
        });
  });
}
